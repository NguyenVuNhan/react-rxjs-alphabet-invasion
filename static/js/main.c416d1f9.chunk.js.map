{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["gameWidth","gameHeight","endThreshold","Math","ceil","intervalSubject","BehaviorSubject","letters$","pipe","switchMap","i","interval","scan","letters","letter","String","fromCharCode","random","charCodeAt","x","floor","y","key$","fromEvent","document","map","e","key","startWith","bind","combineLatest","state","length","score","pop","level","next","concatMap","of","useGame","Bubble","memo","classes","className","clsx","style","left","top","width","height","App","game","fallback","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c416d1f9.chunk.js","sourcesContent":["import React, { memo, Suspense } from \"react\";\nimport clsx from \"clsx\";\nimport \"./App.css\";\nimport { BehaviorSubject, interval, combineLatest, fromEvent, of } from \"rxjs\";\nimport { switchMap, scan, startWith, map, concatMap } from \"rxjs/operators\";\nimport { bind } from \"@react-rxjs/core\";\n\nconst gameWidth = 400;\nconst gameHeight = 600;\nconst bubbleSize = 25;\n\nconst levelChangeThreshold = 20;\nconst endThreshold = Math.ceil(gameHeight / bubbleSize);\nconst speedAdjust = 50;\n\nconst getRandomLetter = () =>\n    String.fromCharCode(\n        Math.random() * (\"z\".charCodeAt(0) - \"a\".charCodeAt(0)) +\n            \"a\".charCodeAt(0)\n    );\n\nconst intervalSubject = new BehaviorSubject(500);\n\nconst letters$ = intervalSubject.pipe(\n    switchMap(i =>\n        interval(i).pipe(\n            scan<number, Letters>(\n                letters => ({\n                    interval: i,\n                    letters: [\n                        {\n                            letter: getRandomLetter(),\n                            x: Math.floor(Math.random() * (gameWidth - 20)),\n                            y: 20\n                        },\n                        ...letters.letters\n                    ]\n                }),\n                { letters: [], interval: 0 }\n            )\n        )\n    )\n);\n\nconst key$ = fromEvent<KeyboardEvent>(document, \"keydown\").pipe(\n    map((e: KeyboardEvent) => e.key),\n    startWith(\"\")\n);\n\nconst [useGame] = bind(\n    combineLatest([key$, letters$]).pipe(\n        scan<[string, Letters], State>(\n            (state, [key, letters]) => (\n                letters.letters[letters.letters.length - 1] &&\n                letters.letters[letters.letters.length - 1].letter === key\n                    ? ((state.score = state.score + 1), letters.letters.pop())\n                    : () => {},\n                state.score > 0 && state.score % levelChangeThreshold === 0\n                    ? ((letters.letters = []),\n                      (state.level = state.level + 1),\n                      (state.score = state.score + 1),\n                      intervalSubject.next(letters.interval - speedAdjust))\n                    : () => {},\n                {\n                    score: state.score,\n                    letters: letters.letters,\n                    level: state.level\n                }\n            ),\n            { score: 0, letters: [], level: 1 }\n        ),\n        startWith({\n            score: 0,\n            letters: [\n                { letter: \"Game start\", x: gameWidth / 2, y: gameHeight / 2 }\n            ],\n            level: 1\n        } as State),\n        concatMap(state => {\n            if (state.letters.length >= endThreshold) {\n                return of(state, {\n                    score: state.score,\n                    letters: [\n                        {\n                            letter: \"Game over\",\n                            x: gameWidth / 2,\n                            y: gameHeight / 2\n                        }\n                    ],\n                    level: state.level\n                } as State);\n            }\n            return of(state);\n        })\n        // endWith({\n        //   score: 0,\n        //   letters: [{ letter: \"Game over\", x: gameWidth / 2, y: gameHeight / 2 }],\n        //   level: 0,\n        // } as State)\n    )\n);\n\nconst Bubble = memo(({ letter, x, y, classes }: Letter) => {\n    return (\n        <div\n            className={clsx(\n                \"bubble\",\n                classes,\n                (letter === \"Game start\" || letter === \"Game over\") &&\n                    \"start-bubble\"\n            )}\n            style={{\n                left: x,\n                top: y,\n                width: bubbleSize,\n                height: bubbleSize\n            }}\n        >\n            {letter}\n        </div>\n    );\n});\n\nconst App = () => {\n    const game = useGame();\n\n    return (\n        <div className=\"App\">\n            <div>\n                <h4>\n                    Level: {game.level} <br />\n                    Score: {game.score}\n                </h4>\n                <div\n                    className=\"game-box\"\n                    style={{ width: gameWidth, height: gameHeight }}\n                >\n                    <Suspense fallback={<p>Loading...</p>}>\n                        {game.letters.map((letter: Letter, index: number) => (\n                            <Bubble\n                                key={index}\n                                letter={letter.letter}\n                                x={letter.x}\n                                y={letter.y}\n                                classes={[\n                                    index === game.letters.length - 1 &&\n                                        \"current-bubble\"\n                                ]}\n                            />\n                        ))}\n                    </Suspense>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}