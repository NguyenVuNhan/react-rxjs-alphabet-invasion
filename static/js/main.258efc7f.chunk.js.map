{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["intervalSubject","BehaviorSubject","bind","pipe","switchMap","i","interval","scan","letters","letter","String","fromCharCode","Math","random","charCodeAt","x","floor","y","letters$","key$","fromEvent","document","map","e","key","startWith","game$","withLatestFrom","filter","length","combineLatest","state","score","pop","level","next","takeWhile","gameHeight","Bubble","memo","className","style","left","top","gameOver","useGame","App","game","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.258efc7f.chunk.js","sourcesContent":["import React, { memo, Suspense } from \"react\";\nimport \"./App.css\";\nimport { BehaviorSubject, interval, combineLatest, fromEvent } from \"rxjs\";\nimport {\n  switchMap,\n  scan,\n  startWith,\n  map,\n  takeWhile,\n  withLatestFrom,\n  filter,\n} from \"rxjs/operators\";\nimport { bind } from \"@react-rxjs/core\";\n\nconst gameWidth = 400;\nconst gameHeight = 600;\n\nconst levelChangeThreshold = 20;\nconst endThreshold = gameHeight / 20;\nconst speedAdjust = 50;\n\nconst getRandomLetter = () =>\n  String.fromCharCode(\n    Math.random() * (\"z\".charCodeAt(0) - \"a\".charCodeAt(0)) + \"a\".charCodeAt(0)\n  );\n\nconst intervalSubject = new BehaviorSubject(600);\n\nconst [useLetters, letters$] = bind(\n  intervalSubject.pipe(\n    switchMap((i) =>\n      interval(i).pipe(\n        scan<number, Letters>(\n          (letters) => ({\n            interval: i,\n            letters: [\n              {\n                letter: getRandomLetter(),\n                x: Math.floor(Math.random() * (gameWidth - 20)),\n                y: 20,\n              },\n              ...letters.letters,\n            ],\n          }),\n          { letters: [], interval: 0 }\n        )\n      )\n    )\n  )\n);\n\nconst key$ = fromEvent<KeyboardEvent>(document, \"keydown\").pipe(\n  map((e: KeyboardEvent) => e.key),\n  startWith(\"\")\n);\n\nconst match$ = key$.pipe(\n  withLatestFrom(letters$),\n  filter(\n    ([key, letters]) =>\n      letters.letters[letters.letters.length - 1] &&\n      letters.letters[letters.letters.length - 1].letter === key\n  )\n);\n\nconst game$ = combineLatest([key$, letters$]).pipe(\n  scan<[string, Letters], State>(\n    (state, [key, letters]) => (\n      letters.letters[letters.letters.length - 1] &&\n      letters.letters[letters.letters.length - 1].letter === key\n        ? ((state.score = state.score + 1), letters.letters.pop())\n        : () => {},\n      state.score > 0 && state.score % levelChangeThreshold === 0\n        ? ((letters.letters = []),\n          (state.level = state.level + 1),\n          (state.score = state.score + 1),\n          intervalSubject.next(letters.interval - speedAdjust))\n        : () => {},\n      { score: state.score, letters: letters.letters, level: state.level }\n    ),\n    { score: 0, letters: [], level: 1 }\n  ),\n  startWith({ score: 0, letters: [{ letter: \"a\", x: 10, y: 0 }], level: 1 }),\n  takeWhile((state) => state.letters.length < endThreshold)\n);\n\nconst Bubble = memo(({ letter, x, y }: Letter) => {\n  return (\n    <div className=\"bubble\" style={{ left: x, top: y }}>\n      {letter}\n    </div>\n  );\n});\n\nconst [useStat] = bind(\n  game$.pipe(\n    map((state) => ({\n      score: state.score,\n      level: state.level,\n      gameOver: state.letters.length < endThreshold,\n    }))\n  )\n);\n\nconst Stat = () => {\n  const { level, score, gameOver } = useStat();\n\n  return gameOver ? (\n    <h4>\n      Level: {level} <br />\n      Score: {score}\n    </h4>\n  ) : (\n    <h4>Game over</h4>\n  );\n};\n\nconst [useGame] = bind(game$);\n\nconst App = () => {\n  // const letters = useLetters();\n  const game = useGame();\n\n  // const letters = useLetters();\n\n  return (\n    <div className=\"App\">\n      <div>\n        {/* <Stat /> */}\n        {/* <h4>\n          Level: {game.level} <br />\n          Score: {game.score}\n        </h4> */}\n        <div\n          className=\"game-box\"\n          style={{ width: gameWidth, height: gameHeight }}\n        >\n          {/* <Suspense fallback={<p>Loading...</p>}> */}\n          {game.letters.map((letter: Letter) => (\n            <Bubble letter={letter.letter} x={letter.x} y={letter.y} />\n          ))}\n          {/* </Suspense> */}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}